// file/dir creation profiler for tests

    private Set<String> beforeFiles;
    private Set<String> afterFiles;

    static class ListGenerator extends DirectoryWalker {
        private final Set<String> toPopulate;

        private static final Pattern uuid = Pattern.compile("^/tmp/([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}).*$");

        ListGenerator(Set<String> toPopulate) {
            this.toPopulate = toPopulate;
        }

        @Override
        protected void handleFile(File file, int depth, Collection results) throws IOException {
            super.handleFile(file, depth, results);
            record(file);
        }

        private void record(File file) {
            String absolutePath = file.getAbsolutePath();
            Matcher matcher = uuid.matcher(absolutePath);
            if (matcher.matches()) {
                toPopulate.add(matcher.group(1));
            }
        }

        @Override
        protected boolean handleDirectory(File directory, int depth, Collection results) throws IOException {
            record(directory);
            return super.handleDirectory(directory, depth, results);
        }

        public void doIt() throws IOException {
            walk(new File("/tmp"), new ArrayList());
        }
    }

    private void recordBefore() {
        beforeFiles = new HashSet<String>();
        try {
            new ListGenerator(beforeFiles).doIt();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private void recordAfter() {
        afterFiles = new HashSet<String>();
        try {
            new ListGenerator(afterFiles).doIt();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }



        afterFiles.removeAll(beforeFiles);
        if (afterFiles.size() > 0) {
            throw new RuntimeException("fuck " + afterFiles);
        }
    }
