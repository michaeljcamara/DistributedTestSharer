\section{Existing Tool}

Work in distributing Java test suites has been completed, specifically by a tool
named Test Load Balancer (TLB) that we found on GitHub (https://github.com/test-load-balancer/tlb).
This tool is able to distribute JUnit tests to multiple nodes. These nodes
can be multiple threads on a local machine, multiple virtual machines, or
multiple physical machines. It is capable of evenly distributing tests
to these nodes by looking at the results from previously run tests. It looks
at this data so that it is able to best prune, order and distribute the tests
in future runs. The results from the previously run tests are stored
on the server, which is referenced upon calling the load balancer. This is, of
course, a brief overview and introduction to TLB tool.

In this project we plan to compare the runtime of running test suites locally,
through the TLB tool and finally against Michael's test load sharer. Based upon
these results, we will be able to inform readers of our final project, the
best way to run test suites in a distributed fashion.

We do have a backup plan if Michael feels that implementing an entire system
is not feasible---even though he has a substantial amount of the system already
working. This backup plan consists of taking advantage of a feature of the TLB
tool, its ability to run a test suite in a distributed fashion on multiple
threads on a local machine, multiple virtual machines, or multiple physical
machines. We would compare the runtimes of these forms of distribution of the tests
to that of running the test suite locally.

We will take advantage of existing systems with adequate test suites rather
than writing a system to test. There are a number of Java projects on GitHub
with adequate test suites. We will run a number---large enough to gather
adequate results---of these projects' test suites against the aforementioned
systems and compare the runtimes.

\section{Work Distribution}

\begin{itemize}
\item Michael Camara - Michael will implement a system for test suite distribution. Additionally,
Michael will write about this system in our final report.
\item Colton McCurdy - Colton will run the existing TLB tool in the multiple accepted configurations to collect
and analyze data about runtimes. Colton will produce visualizations of these
results using the R programming language.
\item Herbie Torrance - Herbie will run the test suites of the existing projects
on GitHub, locally and analyze those results.
\item Gary Miller - Gary will read and write about the TLB tool and any
other tools that he finds will contribute to this project. Gary will also
write about test suite distribution in general.
\end{itemize}
